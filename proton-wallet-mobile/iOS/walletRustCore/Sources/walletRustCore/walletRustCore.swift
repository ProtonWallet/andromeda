// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(RustFrameworkFFI)
import RustFrameworkFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_proton_wallet_common_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_proton_wallet_common_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
                throw CancellationError()

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public protocol AccountProtocol {
    
}

public class Account: AccountProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_proton_wallet_common_fn_free_account(pointer, $0) }
    }

    

    
    
}

public struct FfiConverterTypeAccount: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Account

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Account {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Account, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Account {
        return Account(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Account) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeAccount_lift(_ pointer: UnsafeMutableRawPointer) throws -> Account {
    return try FfiConverterTypeAccount.lift(pointer)
}

public func FfiConverterTypeAccount_lower(_ value: Account) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAccount.lower(value)
}


public protocol MnemonicProtocol {
    func asString()   -> String
    
}

public class Mnemonic: MnemonicProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(wordCount: WordCount)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_proton_wallet_common_fn_constructor_mnemonic_new(
        FfiConverterTypeWordCount.lower(wordCount),$0)
})
    }

    deinit {
        try! rustCall { uniffi_proton_wallet_common_fn_free_mnemonic(pointer, $0) }
    }

    

    public static func fromEntropy(entropy: [UInt8]) throws -> Mnemonic {
        return Mnemonic(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_proton_wallet_common_fn_constructor_mnemonic_from_entropy(
        FfiConverterSequenceUInt8.lower(entropy),$0)
})
    }

    

    public static func fromString(mnemonic: String) throws -> Mnemonic {
        return Mnemonic(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_proton_wallet_common_fn_constructor_mnemonic_from_string(
        FfiConverterString.lower(mnemonic),$0)
})
    }

    

    
    

    public func asString()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_proton_wallet_common_fn_method_mnemonic_as_string(self.pointer, $0
    )
}
        )
    }
}

public struct FfiConverterTypeMnemonic: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Mnemonic

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Mnemonic {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Mnemonic, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Mnemonic {
        return Mnemonic(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Mnemonic) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeMnemonic_lift(_ pointer: UnsafeMutableRawPointer) throws -> Mnemonic {
    return try FfiConverterTypeMnemonic.lift(pointer)
}

public func FfiConverterTypeMnemonic_lower(_ value: Mnemonic) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMnemonic.lower(value)
}


public protocol TxBuilderProtocol {
    
}

public class TxBuilder: TxBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_proton_wallet_common_fn_free_txbuilder(pointer, $0) }
    }

    

    
    
}

public struct FfiConverterTypeTxBuilder: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = TxBuilder

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TxBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: TxBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> TxBuilder {
        return TxBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: TxBuilder) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeTxBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> TxBuilder {
    return try FfiConverterTypeTxBuilder.lift(pointer)
}

public func FfiConverterTypeTxBuilder_lower(_ value: TxBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeTxBuilder.lower(value)
}


public protocol WalletProtocol {
    
}

public class Wallet: WalletProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init(bip39Mnemonic: String, bip38Passphrase: String?, config: WalletConfig) throws {
        self.init(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeError.lift) {
    uniffi_proton_wallet_common_fn_constructor_wallet_new(
        FfiConverterString.lower(bip39Mnemonic),
        FfiConverterOptionString.lower(bip38Passphrase),
        FfiConverterTypeWalletConfig.lower(config),$0)
})
    }

    deinit {
        try! rustCall { uniffi_proton_wallet_common_fn_free_wallet(pointer, $0) }
    }

    

    
    
}

public struct FfiConverterTypeWallet: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Wallet

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Wallet {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Wallet, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
        return Wallet(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Wallet) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeWallet_lift(_ pointer: UnsafeMutableRawPointer) throws -> Wallet {
    return try FfiConverterTypeWallet.lift(pointer)
}

public func FfiConverterTypeWallet_lower(_ value: Wallet) -> UnsafeMutableRawPointer {
    return FfiConverterTypeWallet.lower(value)
}


public struct AccountConfig {
    public var bip: SupportedBiPs
    public var network: Network
    public var accountIndex: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(bip: SupportedBiPs, network: Network, accountIndex: UInt32) {
        self.bip = bip
        self.network = network
        self.accountIndex = accountIndex
    }
}


extension AccountConfig: Equatable, Hashable {
    public static func ==(lhs: AccountConfig, rhs: AccountConfig) -> Bool {
        if lhs.bip != rhs.bip {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.accountIndex != rhs.accountIndex {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bip)
        hasher.combine(network)
        hasher.combine(accountIndex)
    }
}


public struct FfiConverterTypeAccountConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AccountConfig {
        return try AccountConfig(
            bip: FfiConverterTypeSupportedBIPs.read(from: &buf), 
            network: FfiConverterTypeNetwork.read(from: &buf), 
            accountIndex: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: AccountConfig, into buf: inout [UInt8]) {
        FfiConverterTypeSupportedBIPs.write(value.bip, into: &buf)
        FfiConverterTypeNetwork.write(value.network, into: &buf)
        FfiConverterUInt32.write(value.accountIndex, into: &buf)
    }
}


public func FfiConverterTypeAccountConfig_lift(_ buf: RustBuffer) throws -> AccountConfig {
    return try FfiConverterTypeAccountConfig.lift(buf)
}

public func FfiConverterTypeAccountConfig_lower(_ value: AccountConfig) -> RustBuffer {
    return FfiConverterTypeAccountConfig.lower(value)
}


public struct AddressInfo {
    public var index: UInt32
    public var keychain: KeychainKind

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(index: UInt32, keychain: KeychainKind) {
        self.index = index
        self.keychain = keychain
    }
}


extension AddressInfo: Equatable, Hashable {
    public static func ==(lhs: AddressInfo, rhs: AddressInfo) -> Bool {
        if lhs.index != rhs.index {
            return false
        }
        if lhs.keychain != rhs.keychain {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(index)
        hasher.combine(keychain)
    }
}


public struct FfiConverterTypeAddressInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressInfo {
        return try AddressInfo(
            index: FfiConverterUInt32.read(from: &buf), 
            keychain: FfiConverterTypeKeychainKind.read(from: &buf)
        )
    }

    public static func write(_ value: AddressInfo, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.index, into: &buf)
        FfiConverterTypeKeychainKind.write(value.keychain, into: &buf)
    }
}


public func FfiConverterTypeAddressInfo_lift(_ buf: RustBuffer) throws -> AddressInfo {
    return try FfiConverterTypeAddressInfo.lift(buf)
}

public func FfiConverterTypeAddressInfo_lower(_ value: AddressInfo) -> RustBuffer {
    return FfiConverterTypeAddressInfo.lower(value)
}


public struct Balance {
    public var immature: UInt64
    public var trustedPending: UInt64
    public var untrustedPending: UInt64
    public var confirmed: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(immature: UInt64, trustedPending: UInt64, untrustedPending: UInt64, confirmed: UInt64) {
        self.immature = immature
        self.trustedPending = trustedPending
        self.untrustedPending = untrustedPending
        self.confirmed = confirmed
    }
}


extension Balance: Equatable, Hashable {
    public static func ==(lhs: Balance, rhs: Balance) -> Bool {
        if lhs.immature != rhs.immature {
            return false
        }
        if lhs.trustedPending != rhs.trustedPending {
            return false
        }
        if lhs.untrustedPending != rhs.untrustedPending {
            return false
        }
        if lhs.confirmed != rhs.confirmed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(immature)
        hasher.combine(trustedPending)
        hasher.combine(untrustedPending)
        hasher.combine(confirmed)
    }
}


public struct FfiConverterTypeBalance: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Balance {
        return try Balance(
            immature: FfiConverterUInt64.read(from: &buf), 
            trustedPending: FfiConverterUInt64.read(from: &buf), 
            untrustedPending: FfiConverterUInt64.read(from: &buf), 
            confirmed: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Balance, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.immature, into: &buf)
        FfiConverterUInt64.write(value.trustedPending, into: &buf)
        FfiConverterUInt64.write(value.untrustedPending, into: &buf)
        FfiConverterUInt64.write(value.confirmed, into: &buf)
    }
}


public func FfiConverterTypeBalance_lift(_ buf: RustBuffer) throws -> Balance {
    return try FfiConverterTypeBalance.lift(buf)
}

public func FfiConverterTypeBalance_lower(_ value: Balance) -> RustBuffer {
    return FfiConverterTypeBalance.lower(value)
}


public struct WalletConfig {
    public var network: Network

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(network: Network) {
        self.network = network
    }
}


extension WalletConfig: Equatable, Hashable {
    public static func ==(lhs: WalletConfig, rhs: WalletConfig) -> Bool {
        if lhs.network != rhs.network {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(network)
    }
}


public struct FfiConverterTypeWalletConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WalletConfig {
        return try WalletConfig(
            network: FfiConverterTypeNetwork.read(from: &buf)
        )
    }

    public static func write(_ value: WalletConfig, into buf: inout [UInt8]) {
        FfiConverterTypeNetwork.write(value.network, into: &buf)
    }
}


public func FfiConverterTypeWalletConfig_lift(_ buf: RustBuffer) throws -> WalletConfig {
    return try FfiConverterTypeWalletConfig.lift(buf)
}

public func FfiConverterTypeWalletConfig_lower(_ value: WalletConfig) -> RustBuffer {
    return FfiConverterTypeWalletConfig.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum AddressIndex {
    
    case new
    case lastUnused
    case peek(index: UInt32)
}

public struct FfiConverterTypeAddressIndex: FfiConverterRustBuffer {
    typealias SwiftType = AddressIndex

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AddressIndex {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .new
        
        case 2: return .lastUnused
        
        case 3: return .peek(
            index: try FfiConverterUInt32.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AddressIndex, into buf: inout [UInt8]) {
        switch value {
        
        
        case .new:
            writeInt(&buf, Int32(1))
        
        
        case .lastUnused:
            writeInt(&buf, Int32(2))
        
        
        case let .peek(index):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(index, into: &buf)
            
        }
    }
}


public func FfiConverterTypeAddressIndex_lift(_ buf: RustBuffer) throws -> AddressIndex {
    return try FfiConverterTypeAddressIndex.lift(buf)
}

public func FfiConverterTypeAddressIndex_lower(_ value: AddressIndex) -> RustBuffer {
    return FfiConverterTypeAddressIndex.lower(value)
}


extension AddressIndex: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Error {
    
    case invalidSecretKey
    case invalidDescriptor
    case invalidDerivationPath
    case invalidAccountIndex
    case derivationError
    case syncError
    case invalidData
    case generic(msg: String)
    case noRecipients
    case noUtxosSelected
    case outputBelowDustLimit(output: UInt8)
    case insufficientFunds(needed: UInt64, available: UInt64)
    case bnBTotalTriesExceeded
    case bnBNoExactMatch
    case unknownUtxo
    case transactionNotFound
    case transactionConfirmed
    case irreplaceableTransaction
    case feeRateTooLow(required: String)
    case feeTooLow(required: UInt64)
    case feeRateUnavailable
    case missingKeyOrigin(key: String)
    case key(error: String)
    case checksumMismatch
    case spendingPolicyRequired(keychainKind: KeychainKind)
    case invalidPolicyPathError(error: String)
    case signer(error: String)
    case invalidOutpoint(outpoint: String)
    case descriptor(error: String)
    case miniscript(error: String)
    case miniscriptPsbt
    case bip32(error: String)
    case psbt(error: String)
}

public struct FfiConverterTypeError: FfiConverterRustBuffer {
    typealias SwiftType = Error

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Error {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .invalidSecretKey
        
        case 2: return .invalidDescriptor
        
        case 3: return .invalidDerivationPath
        
        case 4: return .invalidAccountIndex
        
        case 5: return .derivationError
        
        case 6: return .syncError
        
        case 7: return .invalidData
        
        case 8: return .generic(
            msg: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .noRecipients
        
        case 10: return .noUtxosSelected
        
        case 11: return .outputBelowDustLimit(
            output: try FfiConverterUInt8.read(from: &buf)
        )
        
        case 12: return .insufficientFunds(
            needed: try FfiConverterUInt64.read(from: &buf), 
            available: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 13: return .bnBTotalTriesExceeded
        
        case 14: return .bnBNoExactMatch
        
        case 15: return .unknownUtxo
        
        case 16: return .transactionNotFound
        
        case 17: return .transactionConfirmed
        
        case 18: return .irreplaceableTransaction
        
        case 19: return .feeRateTooLow(
            required: try FfiConverterString.read(from: &buf)
        )
        
        case 20: return .feeTooLow(
            required: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 21: return .feeRateUnavailable
        
        case 22: return .missingKeyOrigin(
            key: try FfiConverterString.read(from: &buf)
        )
        
        case 23: return .key(
            error: try FfiConverterString.read(from: &buf)
        )
        
        case 24: return .checksumMismatch
        
        case 25: return .spendingPolicyRequired(
            keychainKind: try FfiConverterTypeKeychainKind.read(from: &buf)
        )
        
        case 26: return .invalidPolicyPathError(
            error: try FfiConverterString.read(from: &buf)
        )
        
        case 27: return .signer(
            error: try FfiConverterString.read(from: &buf)
        )
        
        case 28: return .invalidOutpoint(
            outpoint: try FfiConverterString.read(from: &buf)
        )
        
        case 29: return .descriptor(
            error: try FfiConverterString.read(from: &buf)
        )
        
        case 30: return .miniscript(
            error: try FfiConverterString.read(from: &buf)
        )
        
        case 31: return .miniscriptPsbt
        
        case 32: return .bip32(
            error: try FfiConverterString.read(from: &buf)
        )
        
        case 33: return .psbt(
            error: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Error, into buf: inout [UInt8]) {
        switch value {
        
        
        case .invalidSecretKey:
            writeInt(&buf, Int32(1))
        
        
        case .invalidDescriptor:
            writeInt(&buf, Int32(2))
        
        
        case .invalidDerivationPath:
            writeInt(&buf, Int32(3))
        
        
        case .invalidAccountIndex:
            writeInt(&buf, Int32(4))
        
        
        case .derivationError:
            writeInt(&buf, Int32(5))
        
        
        case .syncError:
            writeInt(&buf, Int32(6))
        
        
        case .invalidData:
            writeInt(&buf, Int32(7))
        
        
        case let .generic(msg):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(msg, into: &buf)
            
        
        case .noRecipients:
            writeInt(&buf, Int32(9))
        
        
        case .noUtxosSelected:
            writeInt(&buf, Int32(10))
        
        
        case let .outputBelowDustLimit(output):
            writeInt(&buf, Int32(11))
            FfiConverterUInt8.write(output, into: &buf)
            
        
        case let .insufficientFunds(needed,available):
            writeInt(&buf, Int32(12))
            FfiConverterUInt64.write(needed, into: &buf)
            FfiConverterUInt64.write(available, into: &buf)
            
        
        case .bnBTotalTriesExceeded:
            writeInt(&buf, Int32(13))
        
        
        case .bnBNoExactMatch:
            writeInt(&buf, Int32(14))
        
        
        case .unknownUtxo:
            writeInt(&buf, Int32(15))
        
        
        case .transactionNotFound:
            writeInt(&buf, Int32(16))
        
        
        case .transactionConfirmed:
            writeInt(&buf, Int32(17))
        
        
        case .irreplaceableTransaction:
            writeInt(&buf, Int32(18))
        
        
        case let .feeRateTooLow(required):
            writeInt(&buf, Int32(19))
            FfiConverterString.write(required, into: &buf)
            
        
        case let .feeTooLow(required):
            writeInt(&buf, Int32(20))
            FfiConverterUInt64.write(required, into: &buf)
            
        
        case .feeRateUnavailable:
            writeInt(&buf, Int32(21))
        
        
        case let .missingKeyOrigin(key):
            writeInt(&buf, Int32(22))
            FfiConverterString.write(key, into: &buf)
            
        
        case let .key(error):
            writeInt(&buf, Int32(23))
            FfiConverterString.write(error, into: &buf)
            
        
        case .checksumMismatch:
            writeInt(&buf, Int32(24))
        
        
        case let .spendingPolicyRequired(keychainKind):
            writeInt(&buf, Int32(25))
            FfiConverterTypeKeychainKind.write(keychainKind, into: &buf)
            
        
        case let .invalidPolicyPathError(error):
            writeInt(&buf, Int32(26))
            FfiConverterString.write(error, into: &buf)
            
        
        case let .signer(error):
            writeInt(&buf, Int32(27))
            FfiConverterString.write(error, into: &buf)
            
        
        case let .invalidOutpoint(outpoint):
            writeInt(&buf, Int32(28))
            FfiConverterString.write(outpoint, into: &buf)
            
        
        case let .descriptor(error):
            writeInt(&buf, Int32(29))
            FfiConverterString.write(error, into: &buf)
            
        
        case let .miniscript(error):
            writeInt(&buf, Int32(30))
            FfiConverterString.write(error, into: &buf)
            
        
        case .miniscriptPsbt:
            writeInt(&buf, Int32(31))
        
        
        case let .bip32(error):
            writeInt(&buf, Int32(32))
            FfiConverterString.write(error, into: &buf)
            
        
        case let .psbt(error):
            writeInt(&buf, Int32(33))
            FfiConverterString.write(error, into: &buf)
            
        }
    }
}


public func FfiConverterTypeError_lift(_ buf: RustBuffer) throws -> Error {
    return try FfiConverterTypeError.lift(buf)
}

public func FfiConverterTypeError_lower(_ value: Error) -> RustBuffer {
    return FfiConverterTypeError.lower(value)
}


extension Error: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum KeychainKind {
    
    case external
    case `internal`
}

public struct FfiConverterTypeKeychainKind: FfiConverterRustBuffer {
    typealias SwiftType = KeychainKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> KeychainKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .external
        
        case 2: return .`internal`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: KeychainKind, into buf: inout [UInt8]) {
        switch value {
        
        
        case .external:
            writeInt(&buf, Int32(1))
        
        
        case .`internal`:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeKeychainKind_lift(_ buf: RustBuffer) throws -> KeychainKind {
    return try FfiConverterTypeKeychainKind.lift(buf)
}

public func FfiConverterTypeKeychainKind_lower(_ value: KeychainKind) -> RustBuffer {
    return FfiConverterTypeKeychainKind.lower(value)
}


extension KeychainKind: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Network {
    
    case bitcoin
    case testnet
    case signet
    case regtest
}

public struct FfiConverterTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bitcoin
        
        case 2: return .testnet
        
        case 3: return .signet
        
        case 4: return .regtest
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bitcoin:
            writeInt(&buf, Int32(1))
        
        
        case .testnet:
            writeInt(&buf, Int32(2))
        
        
        case .signet:
            writeInt(&buf, Int32(3))
        
        
        case .regtest:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeNetwork_lift(_ buf: RustBuffer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(buf)
}

public func FfiConverterTypeNetwork_lower(_ value: Network) -> RustBuffer {
    return FfiConverterTypeNetwork.lower(value)
}


extension Network: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum SupportedBiPs {
    
    case bip44
    case bip49
    case bip84
    case bip86
}

public struct FfiConverterTypeSupportedBIPs: FfiConverterRustBuffer {
    typealias SwiftType = SupportedBiPs

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SupportedBiPs {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .bip44
        
        case 2: return .bip49
        
        case 3: return .bip84
        
        case 4: return .bip86
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SupportedBiPs, into buf: inout [UInt8]) {
        switch value {
        
        
        case .bip44:
            writeInt(&buf, Int32(1))
        
        
        case .bip49:
            writeInt(&buf, Int32(2))
        
        
        case .bip84:
            writeInt(&buf, Int32(3))
        
        
        case .bip86:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeSupportedBIPs_lift(_ buf: RustBuffer) throws -> SupportedBiPs {
    return try FfiConverterTypeSupportedBIPs.lift(buf)
}

public func FfiConverterTypeSupportedBIPs_lower(_ value: SupportedBiPs) -> RustBuffer {
    return FfiConverterTypeSupportedBIPs.lower(value)
}


extension SupportedBiPs: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum WordCount {
    
    case words12
    case words15
    case words18
    case words21
    case words24
}

public struct FfiConverterTypeWordCount: FfiConverterRustBuffer {
    typealias SwiftType = WordCount

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WordCount {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .words12
        
        case 2: return .words15
        
        case 3: return .words18
        
        case 4: return .words21
        
        case 5: return .words24
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WordCount, into buf: inout [UInt8]) {
        switch value {
        
        
        case .words12:
            writeInt(&buf, Int32(1))
        
        
        case .words15:
            writeInt(&buf, Int32(2))
        
        
        case .words18:
            writeInt(&buf, Int32(3))
        
        
        case .words21:
            writeInt(&buf, Int32(4))
        
        
        case .words24:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeWordCount_lift(_ buf: RustBuffer) throws -> WordCount {
    return try FfiConverterTypeWordCount.lift(buf)
}

public func FfiConverterTypeWordCount_lower(_ value: WordCount) -> RustBuffer {
    return FfiConverterTypeWordCount.lower(value)
}


extension WordCount: Equatable, Hashable {}



fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

public func libraryVersion()  -> String {
    return try!  FfiConverterString.lift(
        try! rustCall() {
    uniffi_proton_wallet_common_fn_func_library_version($0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_proton_wallet_common_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_proton_wallet_common_checksum_func_library_version() != 8379) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_wallet_common_checksum_method_mnemonic_as_string() != 32395) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_wallet_common_checksum_constructor_mnemonic_from_entropy() != 63136) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_wallet_common_checksum_constructor_mnemonic_from_string() != 26319) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_wallet_common_checksum_constructor_mnemonic_new() != 40163) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_proton_wallet_common_checksum_constructor_wallet_new() != 38674) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}