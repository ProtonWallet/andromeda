// This file is auto-generated and contains the concatenated contents of all the UDL files in src directory
// Do not edit this manually but instead editing/adding UDL files in the src directory

interface TxBuilder {

};

enum SupportedBIPs {
  "Bip44",
  "Bip49",
  "Bip84",
  "Bip86",
};

dictionary AccountConfig {
    SupportedBIPs bip;
    Network network;
    u32 account_index;
};

interface Account {

};

dictionary WalletConfig {
  Network network;
};

interface Wallet {
  [Throws=Error]
  constructor(string bip39_mnemonic, string? bip38_passphrase, WalletConfig config);
};

[Enum]
interface Error {
  InvalidSecretKey();
  InvalidDescriptor();
  InvalidDerivationPath();
  InvalidAccountIndex();
  DerivationError();
  SyncError();
  InvalidData();

  // BDK Errors
  Generic(string msg);
  NoRecipients();
  NoUtxosSelected();
  OutputBelowDustLimit(u8 output);
  InsufficientFunds(u64 needed, u64 available);
  BnBTotalTriesExceeded();
  BnBNoExactMatch();
  UnknownUtxo();
  TransactionNotFound();
  TransactionConfirmed();
  IrreplaceableTransaction();
  FeeRateTooLow(string required);
  FeeTooLow(u64 required);
  FeeRateUnavailable();
  MissingKeyOrigin(string key);
  Key(string error);
  ChecksumMismatch();
  SpendingPolicyRequired(KeychainKind keychain_kind);
  InvalidPolicyPathError(string error);
  Signer(string error);
  InvalidOutpoint(string outpoint);
  Descriptor(string error);
  Miniscript(string error);
  MiniscriptPsbt();
  Bip32(string error);
  Psbt(string error);
};

namespace proton_wallet_common {
    string library_version();
};

interface Mnemonic {
  constructor(WordCount word_count);

  [Name=from_string, Throws=Error]
  constructor(string mnemonic);

  [Name=from_entropy, Throws=Error]
  constructor(sequence<u8> entropy);

  string as_string();
};

dictionary AddressInfo {
  u32 index;
  KeychainKind keychain;
};

[Enum]
interface AddressIndex {
  New();
  LastUnused();
  Peek(u32 index);
};


enum KeychainKind {
  "External",
  "Internal",
};

enum Network {
  "Bitcoin",
  "Testnet",
  "Signet",
  "Regtest",
};

enum WordCount {
  "Words12",
  "Words15",
  "Words18",
  "Words21",
  "Words24",
};

dictionary Balance {
  u64 immature;
  u64 trusted_pending;
  u64 untrusted_pending;
  u64 confirmed;
};

