// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
    #ifndef UNIFFI_SHARED_HEADER_V4
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, const uint8_t *_Nonnull, int32_t, RustBuffer *_Nonnull);

// Task defined in Rust that Swift executes
typedef void (*UniFfiRustTaskCallback)(const void * _Nullable, int8_t);

// Callback to execute Rust tasks using a Swift Task
//
// Args:
//   executor: ForeignExecutor lowered into a size_t value
//   delay: Delay in MS
//   task: UniFfiRustTaskCallback to call
//   task_data: data to pass the task callback
typedef int8_t (*UniFfiForeignExecutorCallback)(size_t, uint32_t, UniFfiRustTaskCallback _Nullable, const void * _Nullable);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

// Continuation callback for UniFFI Futures
typedef void (*UniFfiRustFutureContinuation)(void * _Nonnull, int8_t);

// Scaffolding functions
void uniffi_proton_wallet_common_fn_free_address(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_address_new(RustBuffer address, RustBuffer network, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_address_as_string(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_address_network(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_address_script_pubkey(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_address_to_qr_uri(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_balance(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_proton_wallet_common_fn_method_balance_confirmed(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_proton_wallet_common_fn_method_balance_immature(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_proton_wallet_common_fn_method_balance_total(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_proton_wallet_common_fn_method_balance_trusted_pending(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_proton_wallet_common_fn_method_balance_trusted_spendable(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_proton_wallet_common_fn_method_balance_untrusted_pending(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_derivationpath(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_derivationpath_new(RustBuffer path, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_descriptor(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptor_new(RustBuffer descriptor, RustBuffer network, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptor_new_bip44(void*_Nonnull secret_key, RustBuffer keychain, RustBuffer network, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptor_new_bip44_public(void*_Nonnull public_key, RustBuffer fingerprint, RustBuffer keychain, RustBuffer network, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptor_new_bip49(void*_Nonnull secret_key, RustBuffer keychain, RustBuffer network, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptor_new_bip49_public(void*_Nonnull public_key, RustBuffer fingerprint, RustBuffer keychain, RustBuffer network, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptor_new_bip84(void*_Nonnull secret_key, RustBuffer keychain, RustBuffer network, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptor_new_bip84_public(void*_Nonnull public_key, RustBuffer fingerprint, RustBuffer keychain, RustBuffer network, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptor_new_bip86(void*_Nonnull secret_key, RustBuffer keychain, RustBuffer network, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptor_new_bip86_public(void*_Nonnull public_key, RustBuffer fingerprint, RustBuffer keychain, RustBuffer network, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_descriptor_as_string(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_descriptor_as_string_private(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_descriptorpublickey(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptorpublickey_from_string(RustBuffer public_key, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_descriptorpublickey_as_string(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_descriptorpublickey_derive(void*_Nonnull ptr, void*_Nonnull path, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_descriptorpublickey_extend(void*_Nonnull ptr, void*_Nonnull path, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_descriptorsecretkey(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptorsecretkey_from_string(RustBuffer secret_key, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_descriptorsecretkey_new(RustBuffer network, void*_Nonnull mnemonic, RustBuffer password, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_descriptorsecretkey_as_public(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_descriptorsecretkey_as_string(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_descriptorsecretkey_derive(void*_Nonnull ptr, void*_Nonnull path, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_descriptorsecretkey_extend(void*_Nonnull ptr, void*_Nonnull path, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_descriptorsecretkey_secret_bytes(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_mnemonic(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_mnemonic_from_entropy(RustBuffer entropy, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_mnemonic_from_string(RustBuffer mnemonic, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_mnemonic_new(RustBuffer word_count, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_mnemonic_as_string(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_partiallysignedtransaction(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_partiallysignedtransaction_new(RustBuffer psbt_base64, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_partiallysignedtransaction_extract_tx(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_partiallysignedtransaction_serialize(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_script(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_script_new(RustBuffer raw_output_script, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_script_to_bytes(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_transaction(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_transaction_new(RustBuffer transaction_bytes, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_proton_wallet_common_fn_method_transaction_is_coin_base(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_proton_wallet_common_fn_method_transaction_is_explicitly_rbf(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_proton_wallet_common_fn_method_transaction_is_lock_time_enabled(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_proton_wallet_common_fn_method_transaction_size(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_transaction_txid(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
int32_t uniffi_proton_wallet_common_fn_method_transaction_version(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
uint64_t uniffi_proton_wallet_common_fn_method_transaction_vsize(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_txbuilder(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_txbuilder_new(RustCallStatus *_Nonnull out_status
    
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_txbuilder_add_recipient(void*_Nonnull ptr, void*_Nonnull script, uint64_t amount, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_txbuilder_fee_rate(void*_Nonnull ptr, float sat_per_vbyte, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_txbuilder_finish(void*_Nonnull ptr, void*_Nonnull wallet, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_update(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_free_wallet(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_constructor_wallet_new_no_persist(void*_Nonnull descriptor, RustBuffer change_descriptor, RustBuffer network, RustCallStatus *_Nonnull out_status
);
void uniffi_proton_wallet_common_fn_method_wallet_apply_update(void*_Nonnull ptr, void*_Nonnull update, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_wallet_get_address(void*_Nonnull ptr, RustBuffer address_index, RustCallStatus *_Nonnull out_status
);
void*_Nonnull uniffi_proton_wallet_common_fn_method_wallet_get_balance(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_wallet_get_internal_address(void*_Nonnull ptr, RustBuffer address_index, RustCallStatus *_Nonnull out_status
);
int8_t uniffi_proton_wallet_common_fn_method_wallet_is_mine(void*_Nonnull ptr, void*_Nonnull script, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_method_wallet_network(void*_Nonnull ptr, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_proton_wallet_common_fn_func_library_version(RustCallStatus *_Nonnull out_status
    
);
RustBuffer ffi_proton_wallet_common_rustbuffer_alloc(int32_t size, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_proton_wallet_common_rustbuffer_from_bytes(ForeignBytes bytes, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rustbuffer_free(RustBuffer buf, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_proton_wallet_common_rustbuffer_reserve(RustBuffer buf, int32_t additional, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_continuation_callback_set(UniFfiRustFutureContinuation _Nonnull callback
);
void ffi_proton_wallet_common_rust_future_poll_u8(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_u8(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_u8(void* _Nonnull handle
);
uint8_t ffi_proton_wallet_common_rust_future_complete_u8(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_i8(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_i8(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_i8(void* _Nonnull handle
);
int8_t ffi_proton_wallet_common_rust_future_complete_i8(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_u16(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_u16(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_u16(void* _Nonnull handle
);
uint16_t ffi_proton_wallet_common_rust_future_complete_u16(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_i16(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_i16(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_i16(void* _Nonnull handle
);
int16_t ffi_proton_wallet_common_rust_future_complete_i16(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_u32(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_u32(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_u32(void* _Nonnull handle
);
uint32_t ffi_proton_wallet_common_rust_future_complete_u32(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_i32(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_i32(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_i32(void* _Nonnull handle
);
int32_t ffi_proton_wallet_common_rust_future_complete_i32(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_u64(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_u64(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_u64(void* _Nonnull handle
);
uint64_t ffi_proton_wallet_common_rust_future_complete_u64(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_i64(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_i64(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_i64(void* _Nonnull handle
);
int64_t ffi_proton_wallet_common_rust_future_complete_i64(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_f32(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_f32(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_f32(void* _Nonnull handle
);
float ffi_proton_wallet_common_rust_future_complete_f32(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_f64(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_f64(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_f64(void* _Nonnull handle
);
double ffi_proton_wallet_common_rust_future_complete_f64(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_pointer(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_pointer(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_pointer(void* _Nonnull handle
);
void*_Nonnull ffi_proton_wallet_common_rust_future_complete_pointer(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_rust_buffer(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_rust_buffer(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_rust_buffer(void* _Nonnull handle
);
RustBuffer ffi_proton_wallet_common_rust_future_complete_rust_buffer(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
void ffi_proton_wallet_common_rust_future_poll_void(void* _Nonnull handle, void* _Nonnull uniffi_callback
);
void ffi_proton_wallet_common_rust_future_cancel_void(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_free_void(void* _Nonnull handle
);
void ffi_proton_wallet_common_rust_future_complete_void(void* _Nonnull handle, RustCallStatus *_Nonnull out_status
);
uint16_t uniffi_proton_wallet_common_checksum_func_library_version(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_address_as_string(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_address_network(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_address_script_pubkey(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_address_to_qr_uri(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_balance_confirmed(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_balance_immature(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_balance_total(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_balance_trusted_pending(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_balance_trusted_spendable(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_balance_untrusted_pending(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_descriptor_as_string(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_descriptor_as_string_private(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_descriptorpublickey_as_string(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_descriptorpublickey_derive(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_descriptorpublickey_extend(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_descriptorsecretkey_as_public(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_descriptorsecretkey_as_string(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_descriptorsecretkey_derive(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_descriptorsecretkey_extend(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_descriptorsecretkey_secret_bytes(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_mnemonic_as_string(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_partiallysignedtransaction_extract_tx(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_partiallysignedtransaction_serialize(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_script_to_bytes(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_transaction_is_coin_base(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_transaction_is_explicitly_rbf(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_transaction_is_lock_time_enabled(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_transaction_size(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_transaction_txid(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_transaction_version(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_transaction_vsize(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_txbuilder_add_recipient(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_txbuilder_fee_rate(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_txbuilder_finish(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_wallet_apply_update(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_wallet_get_address(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_wallet_get_balance(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_wallet_get_internal_address(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_wallet_is_mine(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_method_wallet_network(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_address_new(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_derivationpath_new(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptor_new(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptor_new_bip44(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptor_new_bip44_public(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptor_new_bip49(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptor_new_bip49_public(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptor_new_bip84(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptor_new_bip84_public(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptor_new_bip86(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptor_new_bip86_public(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptorpublickey_from_string(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptorsecretkey_from_string(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_descriptorsecretkey_new(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_mnemonic_from_entropy(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_mnemonic_from_string(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_mnemonic_new(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_partiallysignedtransaction_new(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_script_new(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_transaction_new(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_txbuilder_new(void
    
);
uint16_t uniffi_proton_wallet_common_checksum_constructor_wallet_new_no_persist(void
    
);
uint32_t ffi_proton_wallet_common_uniffi_contract_version(void
    
);

